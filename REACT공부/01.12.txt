22.01.12

참고 소스파일:
React_Component.html
React_Hook.html
React_useCSS.html


DOM: 논리 트리
component:  앨리먼트의 집합
element: 각각의 요소

React.useState : 상태값을 관리해주는 훅

use라고 시작하는 메서드를 React에서 Hook이라고 지칭한다.


컴포넌트 사이트 이펙트 다루기
side effect: 부수효과(의도하지 않은 효과라는 측면에서 부작용으로 보기도 한다.)
    사이드 이펙트 이므로, render가 끝난 뒤에 실행된다.(화면이 켜진 다음에 실행되는 형태)

useState → lazy initialize
        함수 안에 넣어두면 해당 연산을 타 연산에 비해 의도적으로 늦게 실행할 수 있다.
useEffect → 두번째 인자로 주어지는 dependency array
          : 배열을 안주는 경우
            모든 동작에 반응한다.

        [] : 빈배열을 줄 수도 있고,
            빈 배열을 주면 처음에만 동작한다.

        [값] : 특정 값을 줄 수도 있다. 
            배열에 입력된 해당 값이 바뀔 때마다 React가 함수를 실행한다.


반복적인 코드 최소화
찍어내기/ 반복 → 함수화
훅(side effect)의 반복 → 커스텀 훅(함수로 생성)

hook의 flow
useEffect → render가 끝난 뒤 실행
update 시 → useEffect clean up / useEffect 실행

<useEffect에 존재하는 기능>
dependency array  → 전달 받은 값의 변화가 있는 경우에만 해당 useEffect를 실행한다.(제약 조건 역할 수행)

예시:
        // ***** 향후에 hook을 활용한 기능 구현 시 우선 순위를 고려해서 설계 필요
        // hook 실행의 각 메서드 별 우선 순위:
        // 1순위: 웹 페이지의 render
        // 2순위: child의 useEffect발동
        // 3순위: 외부의 useEffect발동(html 태그 내의 child 외부에 정의된 동작)
        //      따라서, 외부의 useEffect에 부여한 기능이 가장 늦게 실행된다.
        
        한 번이라도 useEffect가 정의되면 Cleanup을 먼저 실행(전역변수이므로, 프로그램 구동 시 지속적으로 존재하니까 reloading시 기존의 값 초기화부터 실행)

리엑트 Element에 스타일 입히기
className → 문자열
style → 객체, camelcase, className보다 우선권을 가지고 있다.(우선적용된다.)

React.useRef: DOM을 조작하는 hook
input element가 있고 화면이 뜨면 바로 focus를 주고 싶다면, useEffect에 current.focus를 사용한다.


