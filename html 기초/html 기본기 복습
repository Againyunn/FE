<!DOCTYPE html> 
- 해당 파일이 어떤 형식의 파일인지 명시

Heading
<h1> ~ <h6>까지 순차적으로 작아진다.

Paragraphs
<p></p>
- 한 블럭 단위로 구분 할 수 있게 하는 태그

Links
<a href=" https://링크 "></a>
- a태그는 링크 기능을 위한 태그로, 내부 애트리뷰트로 href를 사용해서 링크 처리

Images
<img src="이미지 파일 위치"  alt="대체 텍스트" width="넓이" height="높이 />
- src의 활용:
    절대주소: https://주소명 이나, C://로컬주소명
    상대주소: "../파일명"이나, "/파일명" 
    * 일반적으로는 상대주소가 유용하지만, 해당 도메인(주소)가 옮겨지면 참조오류 발생    

Line Breaks
- <br/>
- 한 줄 띄움

닫는 괄호를 제대로 처리하지 않으면 error발생 가능(특히 React를 사용하는 환경에서)
- </태그명>

HtML은 까다롭게 서식을 검사하지 않아서, <P>와 <p>를 동일하게 인식한다.
그러므로 React로 작업할 때 더욱 조심해야 한다.(기존 element나 tag와 충돌이 발생할 수 있음 camel case 적극 활용하기)

style
- style 애트리뷰트 : CSS 적용
    style="color:red;" 와 같은 형식 사용

<html lang="en">
- 웹 페이지의 기본 언어를 지정하는 코드로, <!DOCTYPE html>바로 아래에 위치

title
- title 애트리뷰트 : 해당 엘리먼트(태그)의 추가적인 정보를 제공(설명)
    문자열이므로, " "처리 필수!
* html에서 title을 반드시 입력해주기!

문자열의 처리
    "  와 '를 혼용하여처리

heading<h1>~<h6>까지
- 브라우져가 자동으로, <h#>태그 위 아래에 빈 공백을 넣는다.(<br/>안해도 위 아래 공백 발생)
- font size를 임의로 더 키우고 싶으면,  style 애트리뷰트 사용
    ex) <h1 style="font-size : 숫자px;" >형식으로

paragraph
- 브라우져가 자동으로, <p#>태그 위 아래에 빈 공백을 넣는다.(<br/>안해도 위 아래 공백 발생)
- <p>내부의 문자들은 띄어 쓰기는 1칸만 띄어쓰기가 기본적으로 가능, 줄바꿈을 해도 적용x
    대안책: <pre> 엘리먼트(서식 적용)
        <pre>를 사용하면, <pre>태그 안에 입력되는 값 그대로 화면에 출력(줄바꿈, 띄어쓰기 적용)

horizontal Rules
- <hr>
- 가로줄 생성

style
- style= " 내용물 "
- CSS명령어와 값을 html에 삽입하는 것
- CSS명령어의 메서드(명령어) 규칙 : 어절-어절 의 형태 ex) backgound-color ↔ React나 Java등의 camel-case식 표현 ex) backgroundColor 과 다름에 주의
- = 대신에 : 를 사용
- 각 명령어마다 ; 로 구분
    ex) <p style="CSS명령어1 : 값1; CSS명령어2 : 값2;"> 

background-color
- 배경화면 색 
    ex) style = "background-color : skyblue;"
color
- 색(해당 element 전체에 적용)
    ex) <h1 style = "color:red;"> ...

font
- 글자 모양
    ex) <h1 style="font-family: verdana;">...

font size
- 글자 크기
    ex) <h1 style="font-size: 200%;" >

text alignment
- 글자 정렬
    ex) <h1 style="text-align: center;">

bold text
- <b> , <strong>
- 글자를 굵게

italic text
- <i>, <em>
- 이테리 글씨체(기울임 + 폰트)

marked text
- <mark>
- 글씨에 형광펜 처리

smaller text
- <small>
- 작은 글씨체

deleted text
- <del>
- 글자에 지움 줄 표시

inseted text
- <ins>
- 글자에 밑줄 표시

subscript text
- <sub>
- 아래에 내려 쓴 글씨 형식

superscript text
- <sup>
- 위로 올려 쓴 글씨 형식

blockquote
- <blockquote>
- 단락 인용문 형식
    ex) <blockquote cite="https://@@@@">... 애트리뷰트로 cite(참조 주소)를 가지고 있다.

quote
 - <q>
 - " 를 자동으로 삽입해주는 인용문 형식

Abbreviations
- <abbr>
- 축약형 형식 ex) Mr. ASAP 등

bi-directional override
- <bdo>
- 글의 좌우를 뒤집어 역순으로 표기
    ex) <bdo>"This line will be end."</bdo> → ".dne eb lliw enil sihT" 라고 웹 상에 표시

border color
- 해당 글 영역의 테두리 칠하기
    ex) <h1 style="border:2px solid Tomato;">Hello World</h1>  //solid가 빠지면, 색이 나타나지 않는다.


CSS복습 파트에서 자세히 다룰 예정:
* CSS란:
- Cascating Style Sheets : 연쇄적인 스타일 시트
- 활용법:
1) 특정 영역만 CSS적용할 때 : HTML 엘리먼트 내부에서는 "style="로 선언
2) HTML class를 만들어 전체적으로 활용할 경우:  <head> 섹션에 <style> CSS 명령어 입력 </style>
3) CSS원문 링크를 참조 방법: <link>로 해당 local/ 외부 소스 링크 지정
    ex) <head>  <link href="https://@@@ 또는 C://@@@ 등"> </head>
* 2)처럼 전체 html에 영향을 줄 수 있도록 <head><style> @@@ </style></head>로 선언된 경우, 일반 "엘리먼트"에서 style 선언을 안하면, <head>에 설정된 CSS형식대로 서식이 적용. 그러나, "엘리먼트" 내부에 style 애트리뷰트가 선언된 경우, 선언된 style이 html에 전체에 선언된 CSS형식을 override 한다.

기본 CSS 명령어:
color : 글자의 색깔 설정
font-family : 글씨체 설정
font-size  : 글씨 크기 설정
border : HTML 엘리먼트의 테두리 색 설정
padding : 글씨와 HTML 엘리먼트 사이의 간격 설정(여백)
margin : HTML 엘리먼트사이의 간격 설정

border의 선 종류:
    1) dotted : 작은 점선
    2) dashed : 큰 점선
    3) solid : 칸(일반적인 줄선)
    4) double : 이중선
    5) outset : 볼록 선
    6) inset : 오목 선
    7) none : 선 없음

boder간의 간격:
    border-space : 경계 간의 간격

padding 유형:
    1) padding-top : 위쪽 여백
    2) padding-bottom : 아래쪽 여백
    3) padding-left : 왼쪽 여백
    4) padding-right : 오른쪽 여백


a hyperlink
- <a> 
    ex) <a href="링크"> </a>
- target활용
1) _self: 현재 탭에 <a>에 선언된 링크로 연결
2) _blank: 새 탭에 <a>에 선언된 링크로 연결
3) _parent: 현재 탭에 <a>에 선언된 링크로 연결 + 현재 이용하고 있는 브라우져 그대로(_self와 유사한 기능)
4) _top: 현재 탭에 <a>에 선언된 링크로 연결 + 전체화면으로 변경

button에 링크 이동 기능 부여
    ex) <button onclick="링크"> </button>

bookmark 기능(링크 이동 시, 특정 페이지 위치로 이동)
- 원리: HTML 엘리먼트의 특정 id 위치로 링크를 반환
    ex) <a href="링크#아이디"> </a>  → hyperlink 내의 "아이디" 위치로 이동
    ex) <a href="#아이디"> </a>  → 현재 문서(html) 내의 "아이디" 위치로 이동

image map기능
- 이미지 내부에 특정 객체를 식별할 수 있도록 "영역"으로써 지정하는 기능
- 영역을 지정하여, 해당 영역을 "클릭"하면 특정 동작을 하거나, 페이지로 이동하도록 지정할 수 있다.
    ex) <img src=" 이미지 파일" alt="대체 텍스트" usemap="#맵 이름">
        <map name="맵 이름">
            <area shap = "rect" coord="화면 내의 4방위" alt="대체 텍스트" href="하이퍼링크>
            <area shap = "circle" coord="화면 내의 4방위" alt="대체 텍스트" href="하이퍼링크>
        </map>

background image
- 웹 페이지 가장 뒤의 배경 이미지를 지정
1) div 형태로 삽입(div에 의해 가려진다.)
    <div style="background-image: url('이미지 파일 위치/링크");>

2) head에 CSS 클래스 형식으로 선언
    ex) div형식 : div가 위치한 영역만 배경이 표시
        <head>
        <style> 
            div { 
                background-image: url('이미지 파일 위치/링크');
            }   
        </style>
        </head>

    ex) body형식 : 웹 페이지 body영역 전체의 배경
    * 이미지의 크기가 충분히 클 때:
        <head>
        <style>
            body {
                background-image: url('이미지 파일 위치/링크');
                background-repeat: no-repeat;  //배경이미지 반복 여부 
                background-attachment: tiexd;  //배경이미지 고정 여부
                background-size: cover;        //배경이미지 사이즈 조절
            }
        </style>
        </head>
    
    *이미지의 크기가 웹 페이지보다 작은 경우, default값으로 "반복"하게 된다.
    따라서, 반복을 없애기 위해서는 background-repeat: no-repeat으로 반복을 금지할 수 있다.

picture
- <picture>
- 디바이스에 따라 지원가능한(읽을 수 있는) 이미지 형식의 차이가 있다는 점을 보완한 태그
ex) 
1. 디바이스 크기에 따라 다른 이미지 노출
    <picture>
        <source media="(min-width:650px)" srcset="이미지 파일1">  //가로가 650일 경우 "이미지 파일1"을 노출
        <source media="(min-width:450px)" srcset="이미지 파일2">  //가로가 450일 경우 "이미지 파일1"을 노출
        <img src="이미지 파일3"> //기본(defualt) "이미지 파일3"을 노출
    </picture>

2. 디바이스의 인식 가능한 파일 확장자에 따라 다른 이미지 노출
    <picture>
        <source srcset="이미지 파일1.png">  //png인식 가능 경우 "이미지 파일1"을 노출
        <source srcset="이미지 파일2.jpg">  //jps인식 가능 경우 "이미지 파일1"을 노출
        <img src="이미지 파일3.gif"> //기본(defualt) "이미지 파일3"을 노출
    </picture>
    * 기본값 → 코드 순서로 우선순위 적용


favicon
- html 링크의 아이콘 지정
ex) 
    <head>
        <title>사이트 이름</title>
        <link rel="icon" type="image/x-icon" href="이미지 파일 위치/링크">
    </head>

table
1) table cell
- <td>
- 각 각의 셀을 의미

2) table row
- <tr>
- 각 행을 의미

3) table head
- <th>
- 각 열(표)의 머리말

CSS
border 추가하기
ex) table, th, td {
        border: 1px solid black;
    }

collapsed table border 추가하기
ex) table, th, td{
        border: 1px solid black;
        border-collapse: collapse;
    }

style table border
ex) table, th, td{
        border: 1px solid white;
        border-collapse: collapse;
    }
    th, td{
        background-color: maroon;
    }

round table border
// 표 전체에 원형 테두리 생성
ex) table, td, th{
        border: 1px solid black;
        border-radius: 10px;
    }

// 표 테두리 빼고, 각 행렬만 테두리 생성
eX) td, th{
        border: 1px solid black;
        border-radius: 10px;
    }

* CSS style을 table에 적용할 때, tr은 고려하지 않아도 된다.
(table, th, td만 해도 표의 모든 테두리 생성 가능)

multiple columns(행에 여러 열 병합)
- colspan 애트리뷰트 사용
ex) <table>
        <tr>
            <th colspan="2"> Name </th>
            <td>Agae</th>
        </tr>
        <tr>
            <td>Jill</td>
            <td>smith</td>
            <td>50</td>
        </tr>
    </table>

multiple rows(열에 여러 행 병합)
- rowspan 애트리뷰트 사용
ex) <table>
        <tr>
            <th>Name</th>
            <td>Smith</td>
        <tr>
            <th rowspan="2">Number</th>
            <td>304-5768</td>
        </tr>
        <tr>
            <td>386-5768</td>
        </tr>
    </table>

표 CSS 적용(줄무늬)
1) zebra stripes
ex) tr:nth-child(even){
        background-color : skyblue;
    }

2) vertical zebra stripes
ex) th:nth-child(even), td:nth-child(even){
        background-color : skyblue;
    }

* 색칠 되는 칸들의 순서를 바꾸고 싶으면 even → odd 로 변경(짝수행/렬, 홀수행/렬)

3) colgroup
ex) <table>
        <colgroup>
            <col span="5">      //그룹만 지정하고 아무런 서식을 안주면, 해당 그룹은 뛰어넘고, 다음 그룹의 순서를 메기는 방법으로 응용가능
            <col span="2" style="background-color: pink;">
        </colgroup>
        <tr>
            <td>MON</td>
            <td>TUE</td>
            <td>WED</td>
            <td>THU</td>
            <td>FRI</td>
            <td>SAT</td>
            <td>SUN</td>
        </tr>
    </table>

list
1) unordered html list
    - <ul>과 <li>활용
    ex) <ul>
            <li>Coffee</li>
            <li>Tea</li>
            <li>Milk</li>
        </ul>

2) ordered html list
    - <ol>와 <li>활용
    ex) <ol>
            <li>Coffee</li>
            <li>Tea</li>
            <li>Milk</li>
        </ol>

block
1) div
- 타 엘리먼트를 "외부에서" 감싸는 컨테이너 역할
- <div>

2) span
- 타 엘리먼트 "내부에서" 독립영역으로 사용할 수 있는 컨테이너 역할
- <span>


CSS의 Class지정을 통해, 해당 페이지(html)에서 CSS사용하기
- .클래스이름 으로 사용
    ex) <head>
            <style>
                .Coffee{        /* 클래스 이름 지정 */
                    background-color: maroon;
                    color: white;
                    border: 1px solid black;
                    margin: 10px;
                    padding: 20px;
                }
            </style>
        </head>

        <body>
            <div class="Coffee">
                <h1>Brazil</h1>
                <p>This type of coffee has deep perfume.</p>
            </div>
        </body>

id 활용
HTML 내부에서 사용할 경우   
- id="아이디명"
ex) <h1 id="newHeader">it is new!</h1>

HTML외부 or 외부에서 id에 접근할 때
- #아이디명
ex) CSS에서 접근, 정의 할 때
    <head>
        <style>
            #newHeader{
                ...
            }
        </style>
    </head>

ex) 링크로 접근할 때
    https://againyunn.profile#newHeader

inline frame
- <iframe>
ex) <iframe src="링크/파일 명" style="height:높이; width:너비;" title="부가설명(안내 설명)"></frame>

meta
meta의 앨리먼트 사용 예시:
    <meta chrset="UTF-8">
    <meta name="description" content="Free Wed tutorials">
    <meta name="keyword" content="Studying Wed Dev">
    <meta name="author" content="againyunn">

responsive web site(반응형 웹 사이트)
- viewport 설정
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

- html 내의 사용방법
    이미지의 경우:
        style의 width, height로 사용
        1) width : 디바이스의 크기 중 100% 일치하게 확대/축소하여 반환
            ex) <img src="이미지 파일" style="width:100%">
        
        2) max-width : 이미지보다 디바이스의 크기가 더 큰 경우, 최대로 크기를 키워도 이미지 파일 크기까지만 제한
            ex) <img src="이미지 파일" style="max-width:100%; height:auto;">

    글자의 경우:
        vw사용 (viewport width)
        ex) <h1 style="font-size:10vw;">Hello world</h1>
    
    CSS 클래스로 만들어 활용하는 경우:
        width, height의 단위를 "숫자%"로 정의
        ex) <style>
                .left, .right{
                    float: left;
                    width: 20%;
                }

                .main{
                    float: left;
                    width: 60%;
                }

                @maeida sreen and (max-width: 800px){
                    .left, .main, .right{
                        width: 100%
                    }
                }
            </style>

semantic element(의미를 가진 엘리먼트)
종류:
1) <article>
2) <aside>
3) <details>
4) <figcaption>
5) <figure>
6) <footer>
7) <header>
8) <main>
9) <mark>
10) <nav>
11) <section>
12) <summary>
13) <time>


<section>
- 역할: 영역을 분리(div와 유사)
- 의미: 동일한 글 중 맥락이 달라지는 경우 구분하기 위한 기준

<article>
- 역할: 영역을 분리(div와 유사)
- 의미: 서로 다른 글을 구분하기 위한 기준

<header>
- 역할: 영역을 분리(div와 유사)
- 의미: 새로운 글 혹은 맥락의 시작을 알리는 기준점

<footer>
- 역할: 영역을 분리(div와 유사)
- 의미: 글/사이트 등의 정보를 담는 역할로 가장 아래쪽에 사용

<nav>
- 역할: 영역을 분리(div와 유사)
- 의미: 사이트/서비스의 네비게이션(링크나 특정 동작을 통해)역할

<figure>
- 역할: 영역을 분리(div와 유사)
- 의미: 미디어 정보를 담는 역할
ex) <figure>
        <img src="이미지 정보" alt="대체 텍스트">
        <figcaption>이미지 정보를 표시할 태그</figcaption>
    <figure>

form

<input> 엘리먼트:
1) <input type="text"> 
    일렬의 글자 입력칸 생성
2) <input type="audio"> 
    단일 항목을 선택할 수 있는 목록 생성(단일 선택)
3) input type="checkbox"> 
    여러 항목을 선택할 수 있는 목록 생성(다중 선택)
4) <input type="button">
    클릭할 수 있는 버튼 제공
5) <input type="submit">
    form을 post 형태로 제출할 수 있는 버튼 제공

ex) <form>
        <input type="checkbox" id="vehicle1" name="vehivle1" value="Bike">
        <label for="vehicle1">I have a bike</label>     //for은 대상 엘리먼트의 name을 따른다.
        <br/>
        <input type="checkbox" id="vehicle2" name="vehivle2" value="Car">
        <label for="vehicle2">I have a car</label>

action 애트리뷰트
- form을 제출하고 다음 동작을 정의
    ex) <form action="파일명/ 링크 명">    //실행할 파일 or 이동할 링크 명 제공

- target 애트리뷰트
    1) _blank : 새로운 창이나 탭에 action을 동작 실행
    2) _self : 현재 창에 action 동작 실행
    3) _parent : 지금 창의 탭에서 action 동작 실행
    4) _top : 전체 화면으로 확장하여 action 동작 실행

- method 애트리뷰트
    <form action="파일명/ 링크 명" method="get/ post">

* get과 post의 기본적인 차이:
    get: 
        - url 검색 창 외부에 입력받은 내용을 노출
        - 입력 값에 따라 식별가능한 링크가 생성되어 이를 활용가능(링크 주소, 북마크로 활용가능)
        - 데이터로 전송가능한 값의 제한이 존재
    
    post: 
        - html파일과 백엔드 서버 간에 전송되는 데이터로, 외부 url로는 노출되지 않는다.
        - 입력 값의 제한이 없다.
        - 링크나 북마크 등으로 이용할 수 없다.

select 엘리먼트
    input의 checkbox와 유사 but, 외부에 하나하나 보여줄 필요 없이 select 칸을 누르면 선택가능 항목이 드롭다운으로 노출
    ex) <label for="cars">choose a car:</label>
        <select id="cars name="cars">
            <option value="volvo">Volvo</option>
            <option value="saab">Saab</option>
            <option value="fiat">Fiat</option>
            <option value="audi">Audi</option>
        </select>

input 태그 종류:
    1) <input type="button">
    2) <input type="checkbox">
    3) <input type="color">
    4) <input type="date">
    5) <input type="datetime-local">
    6) <input type="email">
    7) <input type="file">
    8) <input type="hidden">
    9) <input type="image">
    10) <input type="month">
    11) <input type="number">
    12) <input type="password">
    13) <input type="radio">
    14) <input type="range">
    15) <input type="search">
    16) <input type="submit">
    17) <input type="tel">
    18) <input type="text">
    19) <input type="time">
    20) <input type="url">
    21) <input type="week">


video/ audio 엘리먼트
- <video/ audio>
    1) controls : 사용자가 시작버튼을 눌러야 시작
        ex) <video width="320" height="240" controls>
                <source src="동영상 파일" type="video/파일형식">
            </video>
        
        ex) <audio controls>
                <source src="오디오 파일" type="audio/파일형식">
            </audio>
    
    2) autoplay : 해당 링크 접속 시 자동 재생 시작
        ex) <video width="320" height="240" autoplay>
                <source src="동영상 파일" type="video/파일형식">
            </video>

        ex) <audio controls autoplay>
                <source src="오디오 파일" type="audio/파일형식">
            </audio>

    3) autoplay muted : 해당 링크 접속 시 자동 재생 & 음소거
        ex) <video width="320" height="240" controls>
            <source src="동영상 파일" type="video/파일형식">
        </video>

*api는 종류 및 처리가 다양하여 따로 학습 예정

